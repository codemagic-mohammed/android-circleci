workflows:
  android-workflow:
    name: Android Workflow
    max_build_duration: 60
    instance_type: linux_x2
    cache:
      cache_paths:
        - $HOME/.gradle/caches
    environment:
      groups:
        # Add the group environment variables in Codemagic UI (either in Application/Team variables) - https://docs.codemagic.io/variables/environment-variable-groups/
        # - codemagic_test_keystore_cred # <-- Includes - CM_KEYSTORE, CM_KEYSTORE_PASSWORD, CM_KEY_PASSWORD, CM_KEY_ALIAS
        - google_play # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS - Put your google-services.json here)
      vars:
        CM_KEYSTORE_PATH: /tmp/keystore.keystore
      android_signing:
        - codemagic_test
      node: latest
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "*"
          include: true
      cancel_previous_builds: false
    scripts:
      - name: Set up key.properties file for code signing
        script: |
          # !/usr/bin/env zsh 
          # echo $CM_KEYSTORE | base64 --decode > $CM_KEYSTORE_PATH
          cat >> "$CM_BUILD_DIR/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          storeFile=$CM_KEYSTORE_PATH
          EOF
      - name: Set up local properties
        script: |
          #!/usr/bin/env zsh 
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
      - name: Build aab Android app
        script: |
          #!/usr/bin/env zsh 
          chmod +x gradlew # because the gradlew was denied
          ./gradlew bundleRelease # To generate an .apk use--> ./gradlew assembleRelease
      - name: Build apk Android app
        script: |
          #!/usr/bin/env zsh
          ./gradlew assembleRelease
      # - name: Check app cert
      #   script: |
      #     #!/usr/bin/env zsh
      #     jarsigner -verify -verbose -certs app/build/outputs/**/**/*.apk
    artifacts:
      - app/build/outputs/**/**/*.aab
      - app/build/outputs/**/**/*.apk
    publishing:
      scripts:
        - name: Check read
          script: |
            if [[ $FCI_ARTIFACT_LINKS ]] ; then
              echo "There's a artifacts."
              export APK_LINK=$(echo $FCI_ARTIFACT_LINKS | jq '.[1] | .url')
              export IPA_LINK=$(echo $FCI_ARTIFACT_LINKS | jq '.[0] | .url')
              export ENCODED_APK_LINK=$(jq -rn --arg x $APK_LINK '$x|@uri')
              export ENCODED_IPA_LINK=$(jq -rn --arg x $IPA_LINK '$x|@uri')
              read -r -d '' COMMENT << EOM
              # ⬇️ Generated builds by [Codemagic](https://codemagic.io/app/$FCI_PROJECT_ID/build/$FCI_BUILD_ID) for commit \`$FCI_COMMIT\` ⬇️
              Generated builds by [Codemagic](https://codemagic.io/app/$FCI_PROJECT_ID/build/$FCI_BUILD_ID) for commit \`$FCI_COMMIT\` ⬇
              | Android | iOS |
              |:-:|:-:|
              | ![image](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=$ENCODED_APK_LINK) <br /> [Download-Link]($(echo "$APK_LINK" | tr -d '"')) | ![image](https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=$ENCODED_IPA_LINK) <br /> [Download-Link]($(echo "$IPA_LINK" | tr -d '"')) |
              EOM
              # gh pr comment $FCI_PULL_REQUEST_NUMBER -b "$COMMENT"
              echo "COMMENT: $COMMENT"
            else
               echo "There is no artifacts to publish cause of build failure"
            fi

      # email:
      #   recipients:
      #     - mohammed@nevercode.io
      #   notify:
      #     success: false
      #     failure: false
      # slack:
      #   channel: "#test-codemagic1"
      #   notify_on_build_start: true
      # google_play: # For Android app
      #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS # Contents of the JSON key file for Google Play service account saved as a secure environment variable
      #   track: internal # Name of the track internal, alpha, beta, production, internal app sharing, or your custom track name
      #   # in_app_update_priority: 3 # Optional Priority of the release (only set if in-app updates are supported): integer in range [0, 5]
      #   # rollout_fraction: 0.25 # Optional. Rollout fraction (set only if releasing to a fraction of users): value between (0, 1)
      #   changes_not_sent_for_review: false # Optional boolean To be used ONLY if your app cannot be sent for review automatically *
      #   submit_as_draft: true # Optional boolean. Publish artifacts under a draft release. Can not be used together with rollout_fraction. Defaults to false
  # android-fastlane:
  #   name: Android Fastlane
  #   max_build_duration: 60
  #   instance_type: linux_x2
  #   environment:
  #     groups:
  #       # - google_play # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS - Put your google-services.json here)
  #       - keys # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS - Put your google-services.json here)
  #     android_signing:
  #       - codemagic_test
  #     node: latest
  #   triggering:
  #     events:
  #       - push
  #     branch_patterns:
  #       - pattern: "*"
  #         include: false
  #   scripts:
  #     - name: Set up local properties
  #       script: |
  #         #!/usr/bin/env zsh
  #         echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
  #     - bundle install
  #     - name: Build, increment the build number and publish to the store
  #       script: |
  #         #!/usr/bin/env zsh
  #         chmod +x gradlew # because the gradlew was denied
  #         bundle exec fastlane release

  #   artifacts:
  #     - app/build/outputs/**/**/*.aab
  #     - app/build/outputs/**/**/*.apk
